plugins {
    id "java"
    id "java-library"
    id "maven-publish"
    id "signing"
    id "checkstyle"
}

repositories {
    mavenCentral()
}

group = rootProject.group
version = rootProject.version
description = "Embulk: Core classes"

configurations {
    compileClasspath.resolutionStrategy.activateDependencyLocking()
    runtimeClasspath.resolutionStrategy.activateDependencyLocking()
}

tasks.withType(JavaCompile) {
    // "-XDenableSunApiLintControl" enables `@SuppressWarnings("sunapi")` to suppress warnings against sun.misc.Unsafe.
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-XDenableSunApiLintControl"
    options.encoding = "UTF-8"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }

    withJavadocJar()
    withSourcesJar()
}

dependencies {
    // Embulk plugins have expected that embulk-core's dependencies are declared as "compile" in pom.xml.
    // Although those dependencies would be finally removed from embulk-core's direct dependencies,
    // those "compile" declaration would be kept so that plugin developers won't be confused unnecessarily.
    api project(":embulk-spi")

    testImplementation "junit:junit:4.13.2"
    testImplementation project(":embulk-junit4")
    testImplementation "ch.qos.logback:logback-classic:1.3.6"

    // TODO: Remove this, and load it with the proper DependencyClassLoader.
    // This statement gets it loaded by the top-level ClassLoader.
    testImplementation project(":embulk-deps")
}

javadoc {
    options {
        locale = "en_US"
        encoding = "UTF-8"
        overview = "src/main/html/overview.html"
        links "https://docs.oracle.com/javase/8/docs/api/"
    }
}

jar {
    metaInf {
        from rootProject.file("LICENSE")
        from project.file("NOTICE")
    }

    manifest {
        attributes "Implementation-Title": project.name,
                   "Implementation-Version": project.version,
                   "Implementation-Vendor-Id": project.group,
                   "Specification-Title": project.name,
                   "Specification-Version": project.version
    }
}

sourcesJar {
    metaInf {
        from rootProject.file("LICENSE")
        from project.file("NOTICE")
    }
}

javadocJar {
    metaInf {
        from rootProject.file("LICENSE")
        from project.file("NOTICE")
    }
}

// It should not publish a `.module` file in Maven Central.
// https://docs.gradle.org/current/userguide/publishing_gradle_module_metadata.html#sub:disabling-gmm-publication
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name

            from components.java
            // javadocJar and sourcesJar are added by java.withJavadocJar() and java.withSourcesJar() above.
            // See: https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/JavaPluginExtension.html

            pom {  // https://central.sonatype.org/pages/requirements.html
                name = project.name
                afterEvaluate { project ->
                    // "description" is declared in subproject's build.gradle. It needs to be configured after evaluation.
                    description = project.description
                }
                url = "https://www.embulk.org/"

                licenses {
                    license {
                        // http://central.sonatype.org/pages/requirements.html#license-information
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                        distribution = "repo"
                    }
                }

                developers {
                    developer {
                        name = "Sadayuki Furuhashi"
                        email = "frsyuki@gmail.com"
                    }
                    developer {
                        name = "Muga Nishizawa"
                        email = "muga.nishizawa@gmail.com"
                    }
                    developer {
                        name = "Satoshi Akama"
                        email = "satoshiakama@gmail.com"
                    }
                    developer {
                        name = "Dai MIKURUBE"
                        email = "dmikurube@treasure-data.com"
                    }
                    developer {
                        name = "Shinichi Ishimura"
                        email = "shiketaudonko41@gmail.com"
                    }
                    developer {
                        name = "Roman Shtykh"
                        email = "rshtykh@yahoo.com"
                    }
                }

                scm {
                    connection = "scm:git:git://github.com/embulk/embulk.git"
                    developerConnection = "scm:git:git@github.com:embulk/embulk.git"
                    url = "https://github.com/embulk/embulk"
                }
            }
        }
    }

    repositories {
        maven {  // publishMavenPublicationToMavenCentralRepository
            name = "mavenCentral"
            if (project.version.endsWith("-SNAPSHOT")) {
                url "https://oss.sonatype.org/content/repositories/snapshots"
            } else {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            }
            credentials {
                username = project.hasProperty("ossrhUsername") ? ossrhUsername : ""
                password = project.hasProperty("ossrhPassword") ? ossrhPassword : ""
            }
        }
    }
}

signing {
    if (project.hasProperty("signingKey") && project.hasProperty("signingPassword")) {
        logger.lifecycle("Signing with an in-memory key.")
        useInMemoryPgpKeys(signingKey, signingPassword)
    }
    sign publishing.publications.maven
}

tasks.withType(Test) {
    systemProperties System.properties.findAll { it.key.startsWith("org.embulk") }
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        showCauses = true
        showExceptions = true
        showStackTraces = true
        showStandardStreams = true
        outputs.upToDateWhen { false }
    }
}

test {
    dependsOn ":test-helpers:deploy"
    maxHeapSize = "1536m"
    forkEvery = 1  // test processes are forked by each test class (default is 0)
}

tasks.withType(Checkstyle) {
    reports {
        // Not to skip up-to-date checkstyles.
        outputs.upToDateWhen { false }
    }
}

checkstyle {
    toolVersion "8.7"
    configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
    configProperties = [
        "checkstyle.config.path": file("${projectDir}/config/checkstyle")
    ]
    ignoreFailures = false
    maxWarnings = 0  // https://github.com/gradle/gradle/issues/881
}

import java.util.zip.ZipFile
task updateResources(dependsOn: 'prepareDependencyJars') {
    doFirst {
        List<String> packages = []
        List<String> dirs = []
        file("${buildDir}/dependency_jars").listFiles().each { jarFile ->
            List<String> names = new ZipFile(jarFile.toString()).entries().iterator().collect { it.getName() }
            packages.addAll(names.findAll { it.endsWith(".class") }.collect { it.replaceFirst(/(?:^|\/)[^\/]*\.class$/, '').replaceAll(/\//, '.') }.unique())
            dirs.addAll(names.findAll { !it.endsWith("/") && !it.endsWith(".class") }.collect { it.replaceFirst(/(?:^|\/)[^\/]*$/, '') }.unique())
        }
        packages = packages.unique()
        dirs = dirs.unique()
        List<String> uniquePackages = packages.clone()
        List<String> uniqueDirs = dirs.clone()
        packages.each { pk -> uniquePackages.removeAll { it.startsWith(pk + '.') } }
        dirs.each { dir -> uniqueDirs.removeAll { it.startsWith(dir + '/') } }
        uniquePackages.removeAll { it.isEmpty() }
        uniqueDirs.removeAll { it.isEmpty() || it == "META-INF" }
        String date = new Date().format('yyyy-MM-dd HH:mm:ss z', TimeZone.getTimeZone("UTC"))
        file("src/main/resources/embulk/parent_first_packages.properties").withWriter { out ->
            out.println("# generated by './gradlew updateResources' at $date")
            uniquePackages.sort().each { out.println it }
        }
        file("src/main/resources/embulk/parent_first_resources.properties").withWriter { out ->
            out.println("# generated by './gradlew updateResources' at $date")
            uniqueDirs.sort().each { out.println it }
        }
    }
    doLast {
        prepareDependencyJars.execute()
    }
}

task prepareDependencyJars(type: Copy) {
    doFirst {
        delete file("${buildDir}/dependency_jars")
        mkdir file("${buildDir}/dependency_jars")
    }
    into "${buildDir}/dependency_jars"
    from configurations.runtimeClasspath
    from jar.outputs.files
}
